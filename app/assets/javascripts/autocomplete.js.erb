$(function () {

  // Autocomplete
  // ---------------------------------------------------------------------------

  var subjectData,          // complete data (label + id)
      subjectDataArr = [],  // labels only
      $submitLink    = $('#submit-link'),
      sgData; // studium generale data

  // set up an input field for autocomplete, also used in calendar.js
  $.fn.setUpAutocomplete = function(useSgData, sgCallback) {
    return $(this).autocomplete({
      source: !!useSgData ? sgData : subjectData,

      // save subject-ID as data-attribute of input
      select: !!useSgData ? sgCallback : function(event, ui) {
        $(this).data('subject-id', ui.item.id);
      }
    });
  };


  // fetch subject data for autocomplete
  if ($(".subject-title-bg").length > 0) {
    $.get("<%= Htwk2ical::Application.routes.url_helpers.subjects_path(:locale => nil) %>", null, function (data, textStatus, jqXHR) {
      subjectData = data;
      $(".subject-title-bg").find('input').setUpAutocomplete();

      // save labels only so we can use '$.inArray' for easier validation
      $.each(subjectData, function (i, val) {
        subjectDataArr.push(val.label);
      });
    });
  }

  // fetch subject data for autocomplete
  if ($('.choose-courses').length > 0) {
    $.get("<%= Htwk2ical::Application.routes.url_helpers.studium_generales_path(:locale => nil) %>", null, function (data, textStatus, jqXHR) {
      sgData = data;
    });
  }


  // Subject validation
  // ---------------------------------------------------------------------------

  // trigger submit when clicking on button
  $submitLink.click(function (e) {
    var $subjectTitles     = $('.subject-titles'),
        hasEmptyFieldsOnly = true
        subjectIdArr       = [];

    // check if each inserted value is inside our array of possible values
    $subjectTitles.each(function (i, el) {
      var $el       = $(el),
          val       = $el.val()
          subjectID = $el.data('subject-id');

      // skip placeholder fallback and empty values
      if ($el.hasClass('hasPlaceholder') || val == '')
        return;

      // if value is invalid: prevent submit and show tooltip
      if ($.inArray(val, subjectDataArr) == -1) {

        if (!e.isDefaultPrevented()) { // make sure error tooltips are only shown once
          e.preventDefault();
          $el.showErrorPopover();
        }

      // we have at least one valid subject title, so let's save its subject-ID
      } else if (!!subjectID) {
        subjectIdArr.push(subjectID);
        hasEmptyFieldsOnly = false;
      }
    });


    // if we have no errors until now
    if (!e.isDefaultPrevented()) {

      // if we have empty fields only, let's show an error popover
      if (hasEmptyFieldsOnly) {
        e.preventDefault();
        $subjectTitles.eq(0).addClass('error').showErrorPopover();
      
      // we have valid inputs, so build the target url
      } else {
        <%
           # build dummy route
           divider      = CalendarController::SUBJECT_ID_DIVIDER
           dummy_id_str = ([0] * 3).join(divider)
           dummy_href   = Htwk2ical::Application.routes.url_helpers.calendar_courses_path(:subject_ids => dummy_id_str)
        %>

        // replace dummy url with real subject-IDs
        var subjectIdStr = subjectIdArr.join('<%= divider %>');
        $submitLink.prop('href', '<%= dummy_href %>'.replace('<%= dummy_id_str %>', subjectIdStr));
      }
    }
  });


  // attaches popover and shows it
  $.fn.showErrorPopover = function () {
    return this.addClass('error').popover({
      title:     'Bitte Studiengang aus der Liste w√§hlen!',
      content:   'Einfach die ersten Buchstaben des Studiengangs eintippen und den Richtigen aus den Ergebnisliste heraussuchen.',
      placement: 'top',
      trigger:   'manual'
    }).popover('show');
  };

  // remove error class and tooltip when user starts correcting wrong identifier
  $('#subject-title-wrapper').on('focus', '.subject-titles', function () {
    $(this).removeClass('error').popover('destroy');
  });


  // Placeholder fallback
  // ---------------------------------------------------------------------------

  if (!('placeholder' in document.createElement('input'))) {

    // store value of placeholder attribute
    var placeholder = $('.subject-titles:first').attr('placeholder');

    // delete value when user wants to type something
    $('.subject-titles').val(placeholder).focus(function () {
      var $this = $(this);

      if ($this.val() == placeholder)
        $this.val('').removeClass('hasPlaceholder');

    // reset value to placeholder when na value was set
    }).blur(function () {
        var $this = $(this),
            val = $this.val();

        if (val == '' || val == placeholder)
          $this.val(placeholder).addClass('hasPlaceholder');
      });

    // delete all placeholders before submitting the form
    $subjectForm.submit(function () {
      $(this).find('.hasPlaceholder').each(function() {
        $(this).val('');
      });
    });
  }
});